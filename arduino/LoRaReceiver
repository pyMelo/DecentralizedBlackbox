/*************************************************************
 * Heltec (Unofficial) + RadioLib: LoRa Receiver with Minimal Debug Output
 * 
 * Questo sketch ascolta continuamente i pacchetti LoRa. 
 * Quando viene ricevuto un payload (multiplo di 5 byte), il sistema:
 *   - Mostra il payload ricevuto in formato HEX e in bit
 *   - Invia il payload all'endpoint /send tramite HTTP POST
 *************************************************************/

// Must be defined before including heltec_unofficial.h
#define HELTEC_POWER_BUTTON
#include <heltec_unofficial.h>
#include <WiFi.h>
#include <HTTPClient.h>

// LoRa parameters (must match transmitter)
#define FREQUENCY         866.3
#define BANDWIDTH         250.0
#define SPREADING_FACTOR  9
#define TRANSMIT_POWER    0

// Wi-Fi credentials
const char* ssid = "**"
const char* password = "**";
// Server URL for HTTP POST (optional)
const String serverURL = "http://***/send";

// Buffer for received data
uint8_t receivedData[256];  // Adjust as needed

// Flag to indicate a packet has been received
volatile bool packetReceived = false;

// Callback triggered by RadioLib when a packet arrives
void onReceive(void) {
  packetReceived = true;
}

// (Optional) Function to send the received data (as a hex string) to the server via HTTP POST
void sendDataToServer(const String &data) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverURL);
    http.addHeader("Content-Type", "application/json");
    String payload = "{\"data\":\"" + data + "\"}";
    int httpResponseCode = http.POST(payload);
    if (httpResponseCode > 0) {
      Serial.println("Data sent to /send API successfully.");
    } else {
      Serial.print("Error sending data to /send API. HTTP Response code: ");
      Serial.println(httpResponseCode);
    }
    http.end();
  } else {
    Serial.println("WiFi not connected!");
  }
}

void setup() {
  heltec_setup();
  Serial.begin(115200);
  while (!Serial);
  
  Serial.println("LoRa RX Minimal Debug Start");
  
  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
  }
  Serial.println("WiFi connected!");

  // Initialize radio
  int state = radio.begin();
  if (state != RADIOLIB_ERR_NONE) {
    while(true);
  }
  state  = radio.setFrequency(FREQUENCY);
  state |= radio.setBandwidth(BANDWIDTH);
  state |= radio.setSpreadingFactor(SPREADING_FACTOR);
  state |= radio.setOutputPower(TRANSMIT_POWER);
  if (state != RADIOLIB_ERR_NONE) {
    while(true);
  }
  
  // Set callback for DIO1
  radio.setDio1Action(onReceive);
  // Start continuous receive mode
  radio.startReceive(RADIOLIB_SX126X_RX_TIMEOUT_INF);

  Serial.println("Receiver ready! Waiting for LoRa packets...");
}

void loop() {
  heltec_loop();
  
  if (packetReceived) {
    packetReceived = false;
    
    int state = radio.readData(receivedData, sizeof(receivedData));
    if (state == RADIOLIB_ERR_NONE) {
      // For this example, assume payload length is 15 bytes (3 blocks of 5 bytes)
      int payloadLength = 15;
      
      // Build hex and bit strings
      String hexStr = "";
      String bitStr = "";
      for (int i = 0; i < payloadLength; i++) {
        if (receivedData[i] < 16) hexStr += "0";
        hexStr += String(receivedData[i], HEX);
        for (int bit = 7; bit >= 0; bit--) {
          bitStr += String((receivedData[i] >> bit) & 1);
        }
      }
      
      Serial.print("Received Payload (hex): ");
      Serial.println(hexStr);
      Serial.print("Received Payload (bits): ");
      Serial.println(bitStr);
      
      // Send the hex string payload to the /send API
      sendDataToServer(hexStr);
      
      // Restart continuous receive
      radio.startReceive(RADIOLIB_SX126X_RX_TIMEOUT_INF);
    }
    else {
      // Minimal error print
      Serial.print("readData() failed, code ");
      Serial.println(state);
      radio.startReceive(RADIOLIB_SX126X_RX_TIMEOUT_INF);
    }
  }
  
  delay(50);
}
