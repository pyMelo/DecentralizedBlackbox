#define MINIMUM_DELAY 900 // Delay between two consecutive transmissions (15 minutes)

#include <RadioLib.h>
#include <LoRaWAN_ESP32.h>
#include <DHT11.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>

SX1262 radio = new Module(8, 14, 12, 13);
LoRaWANNode* node;
RTC_DATA_ATTR uint8_t count = 0;

#define DHT11_PIN 7
#define BUTTON_PIN 0  // PRG button on Heltec ESP32 (GPIO 0)
DHT11 dht11(DHT11_PIN);
Adafruit_MPU6050 mpu;
uint32_t devAddr = 0x268B2930;

uint8_t nwsKey[] = { 0x8B, 0x47, 0x6D, 0x64, 0xAC, 0xD9, 0x12, 0x53, 0xCB, 0x77, 0x5A, 0xD2, 0x85, 0x76, 0x30, 0x3B };
uint8_t appsKey[] = { 0x30, 0x50, 0x40, 0xC1, 0x1E, 0xF4, 0xE0, 0xA0, 0x93, 0x19, 0xAF, 0x36, 0xCE, 0x02, 0xB2, 0xF7 };


void createSensorBlock(bool encrypted, uint8_t sensorType, uint32_t payload, uint8_t* blockBuffer) {
    uint64_t block = 0;
    block |= ((uint64_t)(encrypted ? 1 : 0)) << 39;
    block |= ((uint64_t)(sensorType & 0x0F)) << 32;
    block |= payload;
    for (int i = 0; i < 5; i++) {
        blockBuffer[i] = (uint8_t)((block >> ((4 - i) * 8)) & 0xFF);
    }
}

void setup() {
    Serial.begin(115200);
    delay(1000);

    pinMode(BUTTON_PIN, INPUT_PULLUP);  // Configure PRG button (GPIO 0)

    Serial.println("Initializing sensors...");
    Wire.begin();
    if (!mpu.begin()) {
        Serial.println("Failed to find MPU6050 chip");
        while (1) { delay(10); }
    }
    mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
    mpu.setGyroRange(MPU6050_RANGE_500_DEG);
    mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);

    Serial.println("Initializing LoRa module...");
    int16_t state = radio.begin();
    if (state != RADIOLIB_ERR_NONE) {
        Serial.println("❌ LoRa initialization failed.");
        return;
    }

    node = persist.manage(&radio);
    node->setDatarate(3);     // A seconda di come la tua libreria mappa i DR
    node->setADR(false);

    if (node->isActivated()) {
        Serial.println("✅ Device already activated. Using persisted session.");
    } else {
        Serial.println("Usign state ABP ");
        state = node->beginABP(devAddr,NULL,NULL, nwsKey, appsKey);
        if (state != RADIOLIB_ERR_NONE) {
            Serial.printf("❌ ABP activation failed with error %d\n", state);
        } else {
            Serial.println("✅ Device activated using ABP.");
        }
    }

    node->setDutyCycle(true, 1250);
}

void sendLoRaData() {
    int temperature = 0, humidity = 0;
    dht11.readTemperatureHumidity(temperature, humidity);

    sensors_event_t a, g, temp;
    mpu.getEvent(&a, &g, &temp);

    Serial.println(" -------------- DATA SENDED -------------- ");
    Serial.printf("Temperature and humidity %d and %d \n", temperature, humidity);

    float Accel = sqrt(a.acceleration.x * a.acceleration.x +
                        a.acceleration.y * a.acceleration.y +
                        a.acceleration.z * a.acceleration.z);

    Serial.printf("Accel : %f \n", Accel);

    Serial.println(" -------------- DATA SENDED -------------- ");

    uint8_t dhtBlock[5];
    createSensorBlock(false, 0x1, (((uint16_t)temperature) << 16) | ((uint16_t)humidity), dhtBlock);

    uint8_t accelBlock[5];
    createSensorBlock(true, 0x2, (uint32_t)(Accel * 100), accelBlock);

    uint8_t gyroBlock[5];
    createSensorBlock(false, 0x3, (((uint16_t)(g.gyro.x * 100)) << 16) | ((uint16_t)(g.gyro.y * 100)), gyroBlock);

    uint8_t payload[15];
    memcpy(payload, dhtBlock, 5);
    memcpy(payload + 5, accelBlock, 5);
    memcpy(payload + 10, gyroBlock, 5);

    Serial.print("Payload: ");
    for (int i = 0; i < 15; i++) {
        Serial.printf("%02X ", payload[i]);
    }
    Serial.println();

    uint8_t downlinkData[256];
    size_t lenDown = sizeof(downlinkData);

    int state = node->sendReceive(payload, sizeof(payload), 1, downlinkData, &lenDown);

    if (state == RADIOLIB_ERR_NONE) {
        Serial.println("✅ Message sent successfully, no downlink received.");
    } else if (state > 0) {
        Serial.printf("✅ Message sent successfully, downlink received (%d bytes).\n", lenDown);
        Serial.print("📥 Downlink Received: ");
        for (size_t i = 0; i < lenDown; i++) {
            Serial.printf("%02X ", downlinkData[i]);
        }
        Serial.println();
    } else {
        Serial.printf("❌ sendReceive returned error %d, retrying later.\n", state);
    }

    // Save the session but do not enter deep sleep
    persist.saveSession(node);    node = persist.manage(&radio);
    if (node->isActivated()) {
        Serial.println("✅ Device already activated. Using persisted session.");
    } else {
        // Activate using ABP since no session is active.
        state = node->beginABP(devAddr,NULL,NULL, nwsKey, appsKey);
        if (state != RADIOLIB_ERR_NONE) {
            Serial.printf("❌ ABP activation failed with error %d\n", state);
        } else {
            Serial.println("✅ Device activated using ABP.");
        }
    }
}

void loop() {
    static unsigned long lastSendTime = 0;
    unsigned long currentMillis = millis();

    // Send data every MINIMUM_DELAY seconds
    if (currentMillis - lastSendTime >= MINIMUM_DELAY * 1000) {
        lastSendTime = currentMillis;
        sendLoRaData();
    }

    // Check if the button is pressed (low signal due to pull-up)
    if (digitalRead(BUTTON_PIN) == LOW) {
        Serial.println("🔘 Button pressed! Resending data...");
        sendLoRaData();

        // Debounce delay
        delay(500);
        while (digitalRead(BUTTON_PIN) == LOW);  // Wait for button release
    }

    delay(10); // Small delay to avoid unnecessary CPU usage
}
